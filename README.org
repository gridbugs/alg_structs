#+TITLE: =alg_structs=: Algebraic Structures in OCaml Structs

An OCaml library specifying algebraic structures useful in the design and
implementation of software.

There are currently no external dependencies.

I wrote this library because I needed these structures for other projects, and
they were not available via any packages published on Opam at the time.

I view this library as an experiment to determine whether easy access to such
mechanisms can be used to any advantage in OCaml programs. Subsequent versions
are subject to breaking changes as the usefulness of the current implementation
is tested and evaluated, however proper semantic versioning will be used to
signal any breaking changes.

The library is modeled after a fragment of Haskell's rich ecosystem of algebraic
structures, implemented via typeclasses. Most of the code in here started out as
direct ports of the corresponding Haskell typeclasses. However, I have taken
liberties to adapt the implementations to be more amenable to idiomatic OCaml
where it seemed appropriate.

* Related work

** Resources consulted

I consulted the following while working on this library, and took at least some
inspiration from each of them:

- Joseph Abrahamson's [[https://github.com/tel/ocaml-cats][ocaml-cats]] :: Abrahamson's =ocaml-cats= is a well
  structured and well documented collection of signatures specifying a number of
  category theoretic structures. Had I discovered that work prior to making
  substantial progress here, I would have considered forking it or basing the
  structure of this library more closely off of that one. There is an essential
  difference between the aims of these libraries however, =ocaml-cats= is
  narrowly focused on specifying the structures, whereas =alg_structs= also
  provides implementations for common data types along with other utilities.
  =ocaml-cats= currently has a more extensive catalog of specifications, and the
  specifications are more principled.

- Yaron Minsky, Anil Madhavapeddy, Jason Hickey's [[https://dev.realworldocaml.org/first-class-modules.html][Real World Ocaml (2nd Edition)]] ::
  Specifically the chapter on first-class modules, which had to refer back to
  several times.

- Joel Bj√∂rnson's [[http://blog.shaynefletcher.org/2017/05/more-type-classes-in-ocaml.html][More type classes]] :: This post provided some helpful guidance
  on hacking the module system to ape typeclasses.

** Similar projects

Projects which have not had an impact on the design of =alg_structs=
but are related, and should be considered as alternatives to this library, and
future sources of inspiration:

- Darin Morrison's [[https://github.com/freebroccolo/ocaml-cats][ocaml-cats]] :: Morrison's =ocaml-cats= is an impressive
  collection of category theoretic constructs. It includes specifications and
  implementations, and even support for (still experimental) modular implicits.
  I wish I had found this work earlier. If I had, I may have forked from it or
  simply done the work to package it up and use it in my other projects.
  Morrison's library is significantly more extensive than =alg_structs= is
  currently, but it is undocummented and doesn't appear to include tests.

* Tasks
** TODO Set up CI
** TODO Set docs to build into github page
** TODO Add CoC
** TODO Add CONTRIBUTING file
** TODO Add a support adapter package for integration with Base/Core
** TODO Expanded implementations of common data types
** TODO Study Morrison's =ocaml-cats= and incorporate relevent design and implementation choices
